[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Markup Languages and Reproducible Programming in Statistics",
    "section": "",
    "text": "Preface and schedule\nThis Quarto book contains the course materials and information for Markup Languages and Reproducible Programming in Statistics. The numbered sections in this book correspond to the weeks, where every week is represented by a single chapter.\n\n\n\nWeek\nDate\nFocus\nLocation\n\n\n\n\n1  Markup Languages\n11 Sep\nIntroduction to Markup Languages; and LaTeX\nBOL 1025\n\n\n2  Quarto\n25 Sep\nMarkdown in (most) Flavors\nBOL 1049\n\n\n3  Version Control\n16 Okt\nVersion Control and Development Flow\nBOL 1025\n\n\nWeek 4\n06 Nov\nReproducible Research Repositories\nBOL 1025\n\n\nWeek 5\n20 Nov\nDeveloper Portfolio\nBOL 1025\n\n\nWeek 6\n04 Dec\nPackages, Code Robustness and Unit Testing\nBOL 1049",
    "crumbs": [
      "Preface and schedule"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Course overview",
    "section": "",
    "text": "General information",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "overview.html#general-information",
    "href": "overview.html#general-information",
    "title": "Course overview",
    "section": "",
    "text": "Course: Markup languages and reproducible programming in statistics (202000010)\nCourse coordinator: Gerko Vink (g.vink@uu.nl)\nTeachers: Gerko Vink (g.vink@uu.nl) & Hanne Oberman (h.i.oberman@uu.nl)\nSchedule: MyTimetable",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "overview.html#course-description",
    "href": "overview.html#course-description",
    "title": "Course overview",
    "section": "Course description",
    "text": "Course description\nThis course gives an overview of the state-of-the-art in statistical markup, reproducible programming and scientific digital representation. Students will get to know the professional field of statistical markup and its innovations and challenges. It consists of meetings in which students will learn about markup languages (\\(\\LaTeX\\) and Markdown), learn efficient programming with R Markdown, experience developing Shiny web apps, get to know version control with Git and will create and maintain their own data archive repository and personal (business card) page through GitHub. Combining these lectures, the students get acquainted with different viewpoints on marking up statistical manuscripts, areas of innovation, and challenges that people face when working with, analyzing and reporting (simulated) data. Knowledge obtained from this course will help students face multidimensional problems during their professional career.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "overview.html#support",
    "href": "overview.html#support",
    "title": "Course overview",
    "section": "Support",
    "text": "Support\nWe will not use the course page on Blackboard. Instead, all course materials can be found here on the course website, www.gerkovink.com/markup.\n\nFor handing in assignments and deliverables, you can fork this repository this template repository following the flow outlined in What to hand in.\n\nIf you regularly update your fork, we can keep track of your progress.\n\nPlease post your content-related questions as an issue in the course repository.\n\nQuestions regarding personal circumstances may be shared through e-mail with the teaching team. Please don’t use e-mail for other questions unless it cannot be avoided - we’d prefer if you ask us in class or open an issue in the course repo.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "overview.html#syllabus",
    "href": "overview.html#syllabus",
    "title": "Course overview",
    "section": "Syllabus",
    "text": "Syllabus\nThis course website serves as syllabus. Background information, e.g. about course aims, can be found on Osiris",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "team.html",
    "href": "team.html",
    "title": "Teaching team",
    "section": "",
    "text": "Instructors\nI am a statistician masquerading as a dark data scientist with a passion for educating people. I aim to be at the cutting edge of both teaching and research and have an interest in new developments concerning the presentation of data, results and knowledge. I have a specific interest for problems where not all data is available (some information is left in the dark), information privacy, computational evaluation and programming. I am based in the Netherlands and work as an associate professor at Utrecht University (Utrecht, Netherlands).\nI live my life with a wife and two kids, a surfboard and a pair of hiking shoes. You can reach me via e-mail at g.vink@uu.nl\nHanne Oberman is a Junior Assistant Professor and develops cool computational evaluation applications. Hanne is a key figure in Utrecht’s Open Science Community and has a knack for new developments in creating and maintaining robust software. Hanne is a contributor and developer to multiple R-packages, some of which are in the top 10 packages developed at Utrecht University. Oh, and Hanne is much too polite, which is why I (Gerko) wrote this text on her behalf. You can reach Hanne at h.i.oberman@uu.nl",
    "crumbs": [
      "Teaching team"
    ]
  },
  {
    "objectID": "deliverables.html",
    "href": "deliverables.html",
    "title": "Deliverables",
    "section": "",
    "text": "What to hand in\nFork this template repository following the flow below. You’ll end up with a copy of the repository template on your GitHub account, with the full course exercise and deliverable structure in the dev branch. The full rationale about GitHub and branching will be explained in more detail in this course.",
    "crumbs": [
      "Deliverables"
    ]
  },
  {
    "objectID": "deliverables.html#sec-grade",
    "href": "deliverables.html#sec-grade",
    "title": "Deliverables",
    "section": "Grading",
    "text": "Grading\nThe following list represents the rubric categories for the deliverables in this course. It will tell you exactly what you will be graded on. All individual deliverables must be completed, submitted, passed or be graded \\(\\geq 5.5\\) to pass the course. No compensation is allowed between the different graded deliverables.\n\n1. Presentation of the portfolio (Pass/Fail)\n\nAll necessary links AND code are presented\nAll exercises are handed in\n\n2. Personal Repository / Development Repository (Pass/Fail)\n\nHINT: don’t include your personal phone number in any online representation and check if all links are actually working.\n\n3. Markup Manuscript (graded; &gt; 5.5; weight: 1/3)\n\nUse of markup language(s)\nUse of figures\nUse of tables\nUse of equations\nReferencing\nOverall document presentation and consistency\nAlignment of end-result with course aims on OSIRIS\nHINT: are your sources included and can the document be compiled from source?\n\n4. Research Compendium (graded; &gt; 5.5; weight: 1/3)\n\nReproducibility\nStructure\nReusability\nCode flow and readability\nCompilation and robustness\nAlignment of end-result with course aims on OSIRIS\n\n5. Shiny app or R-package (graded; &gt; 5.5; weight: 1/3)\n\nFunctionality\nCode flow and readability\nCompilation and code robustness\nPublication / Persistent identifier\nDevelopment workflow and version control\nAlignment of end-result with course aims on OSIRIS\n\n6. Make sure it has been submitted on time!\n\nIf for some reason this poses a problem for you, please contact the course coordinator as soon as possible.\n\n\nYou will receive the margins of the rubric from us at the end of the course that conforms to the above outline. Your exact grading, calculated in accordance with the rubric, will be available for review upon request by appointment.",
    "crumbs": [
      "Deliverables"
    ]
  },
  {
    "objectID": "genai.html",
    "href": "genai.html",
    "title": "GenAI rules",
    "section": "",
    "text": "Copyright and intellectual property",
    "crumbs": [
      "GenAI rules"
    ]
  },
  {
    "objectID": "genai.html#copyright-and-intellectual-property",
    "href": "genai.html#copyright-and-intellectual-property",
    "title": "GenAI rules",
    "section": "",
    "text": "Do you know your input rights?\n\n\n\nAt Methodology and Statistics we hold ethics, honesty, and the values of open science in the highest regard. These principles are the backbone of our academic community and guide our education as well as our pursuit of knowledge.\nNow that AI tools become more advanced and widespread, it is crucial to uphold these values. While much focus has been on the output of AI tools, I want to bring attention to a different concern: the unjust use of what we input into these tools.\nMany of us interact with AI in what feels like the privacy of our own devices. This perceived privacy can create a false sense of security, leading some to input information that was not theirs to share or should have remained confidential. To safeguard our integrity and respect intellectual property rights, we must be cautious about what we share with AI tools. Specifically,\n\nDo not input assignments, course materials, scientific manuscripts or any other work without explicit permission from the owners.\nAvoid using AI tools to process, summarize, grade or evaluate each other’s work unless you have the author’s consent.\n\nBy following these guidelines, we protect and respect both the creative efforts and the intellectual property in our community.",
    "crumbs": [
      "GenAI rules"
    ]
  },
  {
    "objectID": "genai.html#what-about-this-course",
    "href": "genai.html#what-about-this-course",
    "title": "GenAI rules",
    "section": "What about this course?",
    "text": "What about this course?\nThe materials in this course are generated by M&S teaching staff, who hold the copyright. The intellectual property belongs to Utrecht University. Images are either self-generated, directly linked, or generated with AI tools. That said, there is no information in these that exceeds legal use of copyright materials in academic settings, or that is not publicly available or should not be part of the public domain.\n\n\n\n\n\n\nWarning\n\n\n\nYou may use any and all content in this course - including staff names - and submit it as input to generative AI tools, with the following exception:\n\nYou must ensure that the content is not used for further training of the model",
    "crumbs": [
      "GenAI rules"
    ]
  },
  {
    "objectID": "genai.html#our-advice",
    "href": "genai.html#our-advice",
    "title": "GenAI rules",
    "section": "Our advice",
    "text": "Our advice\nGenerative AI can be a great assistant in the generating structured language. Most of the markup and programming languages that we will consider in this course are extremely structured and generative AI can be of great help. Mastering a new language, however, requires practice and becoming dependent on genAI will hinder your progression in the long run. Therefore we advice you to also interact with your instructors, peers and other resources around the web, as it will transform you from a leecher into a seeder. Or in educational terms: if you can explain to others what and why you are doing, you have transformed from student to master.",
    "crumbs": [
      "GenAI rules"
    ]
  },
  {
    "objectID": "week 1.html",
    "href": "week 1.html",
    "title": "1  Markup Languages",
    "section": "",
    "text": "1.1 Introduction\nDear all,\nWelcome to MLaRPiS. In this course you will learn a great deal about presenting and structuring your research. We start doing so with \\(\\LaTeX\\), an environment for typesetting documents that is particularly useful for complex content, such as graphics, tables and equations. The result of a LaTeX document is a perfectly typeset pdf that adheres to a set of predefined rules. Many journals and preprint services in our field require LaTeX documents. This is why you have to learn it. The resulting flexibility and customizability when using LaTeX is why you should learn it.\nI will take you through the basics of the scientific LaTeX family in a couple of walkthroughs and optional exercises. In these exercises we will treat:\nMastering a new scripting or programming environment is not done by simple exercises, but requires practice and repetition. Don’t worry, the documents you will have to produce during this course will require you to repeat the LaTeX process (Wk1) and the processes and skills in other weeks over and over. However, you should work together with others and share your insights, findings and documents. We’ll cover those bases in other weeks.\nOf course you will run into problems and/or difficulties. In general: the internet is your friend. Chances are that someone else encountered the same issue and, most likely, a solution has been posed by an expert user. If, however, you seem stuck; please post an issue on GitHub. Collectively, we can then troubleshoot your problem and help you reach a solution. Just remember that outside of class hours, answers may take a bit longer.\nLaTeX is extremely flexible and allows you to typeset documents with ‘surgical precision’. There are however languages that allow you to create basic documents much quicker, but without the level of detail that LaTeX offers. One such a language is Markdown. This document is created with quarto, an implementation that goes far beyond Markdown and can be compiled from within RStudio. Of course it is required that you learn LaTeX, but since Markdown and Quarto allow for direct integration of LaTeX and Html5, it can be a very valuable tool. If you’d like to see the Quarto files (.qmd), feel free to browse around the course materials repository at github.com/gerkovink/markup.\nEnough general intro. Let’s start,\nGerko and Hanne",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#introduction",
    "href": "week 1.html#introduction",
    "title": "1  Markup Languages",
    "section": "",
    "text": "the introduction to LaTeX\nmanaging references with BibTeX\nincluding equations\ncreating tables and displaying figures",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#the-tex-framework",
    "href": "week 1.html#the-tex-framework",
    "title": "1  Markup Languages",
    "section": "1.2 The TeX framework",
    "text": "1.2 The TeX framework\nTeX’s structure bares close resemblance to that of the R-project. The core functionality can easily be expanded by users by means of packages. These packages are stored in a centralized location called the Comprehensive TeX Archive Network (CTAN). The TexLive and MacTex distributions contain an image of many of the available packages, meaning that you will have most functionality available at all times (even offline).\nJust like with R, TeX is a software implementation that requires an editor to work with. LaTeX is a set of macros that make TeX easier for the users. From this moment on, if I speak about TeX, I am most likely refering to LaTeX.\nTeX is widely used by publishers as it give the user full control about the appearance of the document. It is designed to write in such a way that a minimum of attention is required by the user to typeset the document (as opposed to e.g. typesetting hell MS Word).\n\n\n1.2.1 Installing a TeX framework\nIf you are on Windows or Linux, I suggest you install the easy to install ProTeXt distribution or the TexLive distribution. If you are on a Mac, the MacTex distribution will give you everything you need. If you use the default installation parameters, everything you might ever need is included in these distributions. Both distributions come with an excellent (but basic) editor (Texworks in Texlive and TexShop in MacTex), but if you want to go the fancy way: there are very good alternatives. See this page for a comprehensive overview of all TeX editors and code editors with TeX capabilities.\nAlternatively, you can use the online TeX editor Overleaf. Please pay attention to any data privacy regulations. It may not be an option for all your research endeavors.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#the-structure-of-a-latex-document",
    "href": "week 1.html#the-structure-of-a-latex-document",
    "title": "1  Markup Languages",
    "section": "1.3 The structure of a LaTeX document",
    "text": "1.3 The structure of a LaTeX document\nOpen the file LaTeX_template.tex from the course page. This file is a template that you may use for your documents in this course. The file LaTeX_template.pdf is the typeset version of this document (the output result). We will go through the document line-by-line:\n\n    \\documentclass[10pt, fullpage, a4paper, titlepage]{article}\n\nThis is the line that tells TeX what the class of the document is and how it should be interpreted dimension-wise. In this situation, we use a 10 point font size (options are 10, 11 and 12 point), use the full page, use A4 paper size (as opposed to e.g. US letter format) and require a titlepage. The class of the document is set to be article. There are many deviations from the defaults. A simple online search usually gets you the option you desire.\n\n    \\usepackage{graphicx, latexsym}\n    \\usepackage{setspace}\n    \\usepackage{apalike}\n    \\usepackage{amssymb, amsmath, amsthm}\n    \\usepackage{bm}\n    \\usepackage{epstopdf}\n    \\usepackage[]{hyperref}\n\nWe load these packages by default, because they sum up pretty much everything needed to begin working with LaTeX as a statistician. They govern devices such as graphics, mathematical notation (normal and bold face), and so on. Package hyperref is particularly interesting, because it allows you to set the meta-info for your document and it allows you to specify the way links and references in your document are treated. Meta-info is needed to make your documents indexable and, hence, more visible to you and everyone on the internet (if your document is on the internet).\n\n    \\hypersetup{\n    pdftitle={title of the pdf},\n    pdfauthor={your name},\n    pdfsubject={cool stuff},\n    pdfkeywords={koala, chuck norris},\n    bookmarksnumbered=true,     \n    bookmarksopen=true,         \n    bookmarksopenlevel=1,       \n    colorlinks=true,            \n    pdfstartview=Fit,           \n    pdfpagemode=UseOutlines,      \n    pdfpagelayout=TwoPageRight\n    }\n\nThese are the options set for package hyperref. You can specify the document and author information and add keywords. The other options are also relevant, but we will not discuss them now.\n\n    %\\singlespacing\n    %\\onehalfspacing\n    \\doublespacing\n\nIf you like to have a single-spaced document (commented out by %, so not executed), a one-and-a-half-spaced document (commented out by %, so also not executed) or a double-spaced document (not commented out by %, so executed), these options from package setspace are very handy.\n\n    \\title{title of your paper\\\\ \\small subtitle of your paper}\n    \\author{name}\n    %\\date{\\today}\n    \\date{}\n\nGive titlepage information. We have set a title and a smaller subtitle. A line-break in tex is denoted by \\\\, although most of the times you won’t need to use this as tex takes care of this for you in most situations. The \\small command tells tex that the remainder of this textbox is to be printed in a smaller font. All functions in tex are preceded by \\. So, \\author{} is the function for author, \\date{} the function for the date and \\today the function that prints todays date.\nUp until now, we have not done anything. No code is executed. We have just been considering the preamble of a tex document. To start a document, we use \\begin{document}.\n\n    \\begin{document}\n\nWe can then tell tex to print the titlepage information that we assigned (title, author, date)\n\n    \\maketitle\n\nand continue the document on a new page:\n\n    \\newpage\n\nWe start the first section, labelled abstract:\n\n    \\section*{Abstract}\n    text of abstract\n\nThen a section called Introduction:\n\n    \\section{Introduction}\n    text introduction\n\nWith a subsection called sub introduction:\n\n    \\subsection{sub introduction}\n    text text text\n\nAnd we end the document by the \\end{} command.\n\n    \\end{document}\n\n\n\n\n\n\n\n\nExercise on TeX classes - optional\n\n\n\n\n\nIn this optional exercise you can make yourself familiar with some of the TeX classes. A class is a clear definition of the type of document. There are classes for books, articles, letters, resumes, and so on. There are even classes for journals and bookseries by publishers, such as Springer, Elsevier, CRC and Sage.\nClasses are usually linked to style files, the files that define the looks of a document. Have a look at the LaTeX background archive if you’d like to know more about how classes and styles make documents look different. It is important to realize that not every document by default accommodates for the type of content. Some classes make some content look ridiculous. Imagine printing an A5 document on an A1 canvas, or submitting a job application as a statistical journal manuscript. Choosing a proper class is therefore essential. The good thing with LaTeX is that different classes can easily be applied to the same content.\n\n\n1.3.1 Exercise\nUse the text in the Virgil - Aeneid.txt file as the content for the following five documents:\n\nAn article with 12 point font size on US letter paper.\nA book with 10 point font size on A4 paper.\nA book with 10 point font size on A5 paper.\nA minimal document with 12 point font size on A5 paper.\nA letter with 12 point font size on A5 paper.\n\nYou just need to specify the paragraphs correctly. The solution to this exercise can be found here",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#getting-jumpstarted-with-latex-bibliographies-citing-and-compiling",
    "href": "week 1.html#getting-jumpstarted-with-latex-bibliographies-citing-and-compiling",
    "title": "1  Markup Languages",
    "section": "1.4 Getting jumpstarted with LaTeX, bibliographies, citing and compiling",
    "text": "1.4 Getting jumpstarted with LaTeX, bibliographies, citing and compiling\nI have created many documents and walkthroughs about TeX and LaTeX, most of which are already outdated.\n\nBibliographies in LaTeX with Answers\nFigures and Tables with Answers\nMathematical notation and presentations with Answers\n\nThe folks at Overleaf have provided a much more up-to-date series. I suggest that you go throught the following chapters:\n\nLearn LaTeX in 30 minutes\nBecause most of you are new to LaTeX, I suggest you learn biblatex: Bibliography management with biblatex\nChoosing a LaTeX compiler\nMathematical notation in LaTeX\n\nIf - like me (Gerko) - you still come across new notation conventions and would like to know how to write expressions with it in LaTeX: use detexify to draw the symbol and obtain the LaTeX code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#further-reading",
    "href": "week 1.html#further-reading",
    "title": "1  Markup Languages",
    "section": "1.5 Further Reading",
    "text": "1.5 Further Reading\nChances are that you will struggle at some point with a problem or a compilation error that will lead to much frustration. The internet is your friend: search for the error or problem and you will most likely find the solution. Additionally, these are good resources to study:\n\nLaTeX Wikibook\nMath symbols cheatsheet\nShort math guide\nThe Not So Short Introduction to LaTeX\n\nEven though the internet may hold most answers to your problem, please don’t struggle for too long. Post an issue on GitHub.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 1.html#exercise-for-this-week",
    "href": "week 1.html#exercise-for-this-week",
    "title": "1  Markup Languages",
    "section": "1.6 Exercise for this week",
    "text": "1.6 Exercise for this week\nCreate a document that contains [1-5] and then change the document with [6]. Submit both documents as well as the LaTeXdiff.\n\nA titlepage\nAn equation\nA section and a subsection\nThe resulting figure and table with captions from this file to be generated by the below code:\n\n\n#load package lattice\nlibrary(lattice)\nlibrary(xtable) # generate the LaTeX code for tables\n#fix the random generator seed\nset.seed(123)\n#create data\ndata &lt;- rnorm(1000)\n#plot histogram\nhistogram(data)\n#plot density \ndensityplot(data^12 / data^10, xlab = expression(data^12/data^10))\n#plot stripplot\nstripplot(data^2, xlab = expression(data^2))\n#plot boxplot\nbwplot(exp(data))\n#matrix with all data used\ndata.all &lt;- cbind(data = data, \n                  squared1 = data^12 / data^10,\n                  squared2 = data^2,\n                  exponent = exp(data))\n\n\nThe text from this AI-generated fairytale\nAlso create another document with LaTeXdiff version where the text in fairytale is replaced by this slight variation on the same fairytale\n\n\n\n1.6.1 Handing in the exercise\n\nFork the template repository detailed in Section 1.\nAdd your files to the respective folder in the dev branch. Not in the main branch!\nShare your repository link as an issue in the course repository.\n\nIf you know how to use git, go ahead. If you don’t, no panic. We’ll cover that in week 3. In the meantime you can use the &gt; add file functionality on GitHub as illustrated below.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "week 2.html",
    "href": "week 2.html",
    "title": "2  Quarto",
    "section": "",
    "text": "2.1 Introduction\nDear all,\nWelcome to Quarto - If you already know rMarkdown, it will be a breeze. If you don’t know rMarkdown yet or if you feel that you need a refresher, please follow this Get Started guide. For all others, we have outlined a couple of relevant links and videos to get a quick grasp on reproducible academic publishing with Quarto.\nAll the best,\nGerko and Hanne",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "week 2.html#preparation",
    "href": "week 2.html#preparation",
    "title": "2  Quarto",
    "section": "2.2 Preparation",
    "text": "2.2 Preparation\n\n2.2.1 Watch this video\nMine Çetinkaya-Rundel has a great video that highlights many of Quarto’s relevant features in our field.\n\n\n\n\n2.2.2 Browse the Quarto website\nThe people at Posit have designed this awesome companion website that details pretty much everything Quarto. Have a look around and remember this source when you’re in need of some additional functionality. Much of what you can do with Quarto is detailed here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "week 2.html#exercise-1",
    "href": "week 2.html#exercise-1",
    "title": "2  Quarto",
    "section": "2.3 Exercise 1",
    "text": "2.3 Exercise 1\nCreate a quarto presentation with 3 slides and a logo\n\na title slide with at least your name and ORCID\na slide with your favourite equation\na slide with some source of information about you that (most of) your classmates do not know\n\nBring this presentation to the next class",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "week 2.html#exercise-2",
    "href": "week 2.html#exercise-2",
    "title": "2  Quarto",
    "section": "2.4 Exercise 2",
    "text": "2.4 Exercise 2\nCreate a presentation about any topic you like that consists of at least 7 slides and includes all of the following:\n\na logo\na centered still figure\nan interactive table\na moving figure, interactive figure or movie\na 2-column slide\nan aligned multi-row equation\na citation and reference list\na bibliographic reference\nr-code, displayed but not executed\ncached and labeled r-code (may overlap with the next requirement)\nr-code, executed, but not displayed (e.g. a figure generation)\nan renv reproducible enviroment\n\nOf course this presentation may serve as the basis for presentations that you may have to create for other courses. Submit the presentation to your fork of the deliverables template. If you have not yet forked the template, do so now. See Section 1 for more information.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quarto</span>"
    ]
  },
  {
    "objectID": "week 3.html",
    "href": "week 3.html",
    "title": "3  Version Control",
    "section": "",
    "text": "3.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "week 3.html#introduction",
    "href": "week 3.html#introduction",
    "title": "3  Version Control",
    "section": "3.1 Introduction",
    "text": "3.1 Introduction\n\n\nDear all,\nAs a statistician / data scientist / developer you’ll need to master many skills. Some of these skills are made simple with tools. This week we’ll bite the bullet by learning about two massively important tools for your toolset: version controlling and simulation.\nTo document our activity and our changes in detail, we’ll use Git. You can view Git as the ability to go back in time. Back to the very beginning of your project. A bonus: Git integrates nicely with RStudio. In this series of exercises we will learn\n\nHow to integrate Git within our projects.\nHow to publish our projects as GitHub repositories\nHow to go about development with Git and GitHub\nHow to solve scenarios where Git hits the fan.\n\nAnd in the meanwhile we’ll also Monte Carlo simulate one of the most important concepts in statistics:\n\nConfidence Validity\n\nUse the appropriate channels to ask questions and hand-in your work.\nAll the best,\nGerko and Hanne"
  },
  {
    "objectID": "week 3.html#preparation",
    "href": "week 3.html#preparation",
    "title": "3  Version Control",
    "section": "3.2 Preparation",
    "text": "3.2 Preparation\nRead Excuse me, do you have a moment to talk about version control? by Jennifer Bryan and watch the following clip where Linus Torvalds explains that he merely created Git to manage his other project"
  },
  {
    "objectID": "week 3.html#supplementary-material",
    "href": "week 3.html#supplementary-material",
    "title": "3  Version Control",
    "section": "3.3 Supplementary material",
    "text": "3.3 Supplementary material\n\nGit The following links are very useful:\nAn old video walkthrough about Git and Rstudio\nGitHub Glossary for all terminology\nbecome a Git Guru\nthis online Git book is a very good resource\nThis book covers pretty much everything you need to marry Git and R.\n\nIn previous years, we also discussed Monte Carlo simulation in detail in class. If you want to learn more about this, then study this old markup languages course page."
  },
  {
    "objectID": "week 3.html#git-and-github",
    "href": "week 3.html#git-and-github",
    "title": "3  Version Control",
    "section": "3.4 Git and GitHub",
    "text": "3.4 Git and GitHub\n\n3.4.1 Git\nGit is a free and open source version control system for text files. It can handle extensive change logging for you, no matter the size of the project. Git is fast and efficient, but its effectiveness depends also on the frequency you instruct it to log your project’s changes.\nYou can see Git as a blank canvas that starts at a certain point in time. Every time you (or others) instruct Git to log any changes that have been made, Git adds the changes that are made to this canvas. We call the changes to the canvas commits. With every commit an extensive log is created that includes at least the following information:\n\nthe changes made\nwho made the changes\nmetadata\na small piece of text that describe the changes made\n\nThe difference between two commits - or the changes between them - are called diffs.\nIf you’d like to know much more about Git, this online book is a very good resource. If you’d like to practice with the command line interface use this webpage for a quick course. This book covers pretty much everything you need to marry Git and R.\n\n\n\n3.4.2 GitHub\nGitHub is the social and user interface to Git that allows you to work in repositories. These repositories can be seen as project folders in which you publish your work, but you can also use them as test sites for development, testing, etcetera. There is a distinction between private repositories (only for you and those you grant access) and public repositories (visible for everyone).\nYour public repositories can be viewed and forked by everyone. Forking is when other people create a copy of your repository on their own account. This allows them to work on a repository without affecting the master. You can also do this yourself, but then the process is called branching instead of forking. If you create a copy of a repository that is offline, the process is called cloning.\nGitHub’s ability to branch, fork and clone is very useful as it allows other people and yourself to experiment on (the code in) a repository before any definitive changes are merged with the master. If you’re working in a forked repository, you can submit a pull request to the repository collaborators to accept (or reject) any suggested changes.\nFor now, this may be confusing, but I hope you recognize the benefits GitHub can have on the process of development and bug-fixing. For example, the most up-to-date version of the mice package in R can be directly installed from the mice repository with the following code:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(repo = \"stefvanbuuren/mice\")\n\nYou can see that this process requires package devtools that expands the R functionality with essential development tools. Loading packages in R directly from their respective GitHub repositories, allows you to obtain the latest - often improved and less buggy - iteration of that software even before it is published on CRAN.\n\n\n\n3.4.3 Installing Git\n\n3.4.3.1 Installing on Mac\nI suggest you install Git by downloading and installing GitHub Desktop. GitHub’s desktop application is a nice GUI and, naturally, integrates well into the repository workflow on GitHub.\nWhen installed, you can go to GitHub Desktop &gt; Install Command Line Tool\nAfter a reboot, all should be set.\n\n\n3.4.3.2 Installing on Windows\nDownload and install Git for Windows, Then download and install GitHub Desktop. GitHub’s desktop application is a nice GUI and, naturally, integrates well into the repository workflow on GitHub.\nAfter a reboot, all should be set.\n\n\n\n\n3.4.4 Command line interface vs. GUI\nUltimately, you’ll want to learn how to use Git through the command line interface (CLI). It offers better and more comprehensive functionality. Again, take this 15-minute course to get a gentle introduction. But do not be afraid that you miss out on the CLI if you don’t study this link: In week 4 we’ll explore in detail how to handle Git when things go haywire. You’ll be a CLI-wizard by then.\n\n\n\n3.4.5 .gitignore\nGitHub sees every file in your repository as one of the following three\n\ntracked files that have been (previously) staged and committed\nuntracked files that have not been staged or committed\nignored files that have been explicitly ignored\n\nIt may be wise to instruct Git to ignore changes in some files. For example, compiled files (think about .com, .exe, .o, .so, etc), archives (e.g. .zip, .tar, .rar), logs (.log) and files generated in runtime (.temp) do not have to be tracked by Git. The same holds for hidden system files (e.g. .DS_Store or Thumbs.db). Adding such filetypes to a file named .gitignore and placing that file in the root of your repository will take care of focusing Git’s energy on useful files only. For common .gitignore examples, see this repository. There are many examples inside, such as this .gitignore example for R\n\n\n\n3.4.6 Linking GitHub and RStudio\nSecurely linking your local machine to the remote repository is vital when collaborating with other people. In short; you would not want a potential hacker to have contributor access to any of your projects. I have prepared this walkthrough video that details the process of linking GitHub to your machine and RStudio. Below I explain the rationale of using both an SSH key and a personal access token.\nIf you still experience problems after following my walkthrough, check this chapter\nTo learn more about maintaining a package as GitHub repository within RStudio, have a look at this guide by Hadley Wickham.\n\n\n\n3.4.7 SSH keys\nWith an SSH key you can identify yourself to an online server (in this case the GitHub server) without having to log in every time. It is like your machine having access to an online server through a unique biometric security measure, but instead of biometric data a bits-and-bytes hash code is communicated every time. You can use an SSH key to link RStudio to your GitHub repository, but it is better to use a personal access token for this. See below.\n\n\n\n3.4.8 Personal access tokens\nIf you use GitHub’s 2FA functionality - you should! - your username and password are not sufficient to push commits to GitHub through RStudio. To solve this follow these steps on github.com like I detail in this walkthrough video:\n\nLog in to your account\nClick on your profile photo (upper right corner) and select Settings\nGo to Developer settings\nSelect Personal access tokens in the left sidebar. The classic token as it is now called is sufficient\nClick Generate new token\nGive the token a name\nSelect at least the repo scope; you’ll need these permissions to access repositories. Also choose a relevant expiration: the longer the better, the shorter the safer. Remember that you can always generate a new token if you need to.\nClick Generate token\n\nCopy the token. The token will not be displayed again, so copy-paste it directly where it is needed. Remember that you can always generate a new token if you need to.\nIn RStudio, paste the generated token in the password field when RStudio asks for your credentials. The token will now serve as the unique authenticated link instead of your password."
  },
  {
    "objectID": "week 3.html#exercise-1-git-started-with-github",
    "href": "week 3.html#exercise-1-git-started-with-github",
    "title": "3  Version Control",
    "section": "3.5 Exercise 1: Git started with GitHub",
    "text": "3.5 Exercise 1: Git started with GitHub\n\nFork this year’s course repository. You can do this by clicking the Fork button on the top right of the repository page. This will create a copy of the repository on your own GitHub account.\nClone the fork to your machine. You can do this by clicking the green Code button and copying the URL. Then open RStudio and go to File &gt; New Project &gt; Version Control &gt; Git. Paste the URL in the Repository URL field and choose a directory where you want to store the repository on your machine.\nCreate a new branch called wk3\nUpdate the file story.qmd by adding three words to the sentence and commit the changes. You can do this by clicking on the Git tab in RStudio, selecting the files you want to commit (only one in this case!), writing a commit message and clicking the Commit button.\nPush to your GitHub fork. You can do this by clicking the green Push button in the Git tab in RStudio or by using\nSend a pull request (PR) to incorporate your changes into the upstream/main branch (i.e. gerkovink/markup@main). You can do this by going to your fork on GitHub and clicking the Pull request button. Make sure to select the correct branches.\nIf you’re fast enough, your commit will not result in a conflict. We will merge the PR’s in the order they are presented in, as long as there are no conflicts.\nIf need be, update your PR by simply submitting another commit and pushing it to your fork. This will update the PR automatically.\n\n\n\n\n\n\n\n\nMonte Carlo simulation exercise (no need to hand in)\n\n\n\n\nPerform a small simulation that does the following:\n\n\n\nSample 100 samples from a standard normal distribution.\nFor each of these samples, calculate the following statistics for the mean:\n\n\nabsolute bias\nstandard error\nlower bound of the 95% confidence interval\nupper bound of the 95% confidence interval\n\n\nCreate a plot that demonstrates the following:\n\n“A replication of the procedure that generates a 95% confidence interval that is centered around the sample mean would cover the population value at least 95 out of 100 times” (Neyman, 1934)\n\nPresent a table containing all simulated samples for which the resulting confidence interval does not contain the population value.\n\n\n\n\n\n\n\n\n\nMy solutions to the exercises\n\n\n\n\n\n\nMy old solution to the MC exercise\nMy solution to the MC exercise as I would do it now"
  },
  {
    "objectID": "week 3.html#exercise-2-git-it-done",
    "href": "week 3.html#exercise-2-git-it-done",
    "title": "3  Version Control",
    "section": "3.6 Exercise 2: Git it done",
    "text": "3.6 Exercise 2: Git it done\nThis week we will also learn how to use \\(git\\) properly when we mess up. But let’s not learn that on this year’s repo ;-). Fork [this older course repository (https://github.com/gerkovink/markup2020), deselect! Copy the master branch only in order to copy all branches and checkout the Exercise_wk4 branch.\nLet’s continue this week with this second exercise.\n\n\n3.6.1 Disclaimer\nI’ll take you by the hand through the exercise. So if you follow this manual step by step, you’ll be done at the end and you will have a good notion of troubleshooting with Git [or a reference thereof].\nThis exercise is a summary of important commands. A full and comprehensive overview can be found in the pro Git book.\nO, and we forgot to tell you: you’ll need the terminal for this exercise. You may use the one in RStudio, or the dedicated terminal on UNIX systems or the command prompt or Windows Terminal on Windows.\n\n\n\n3.6.2 Prepare\nBefore we continue it is good to all start from the point of departure.\n\nUse the terminal to navigate to the Git repository (the location of the git repo on your HDD)\nType git pull to make sure that you obtain the latest state from the remote on GitHub\n\n\n% git pull\nAlready up to date.\n\nDon’t type the %; that is just the command prompt indicator on my machine. Yours may be different, such as &gt; or $. We see that Git reminds me that I already have the latest state. I am up to date.\n\nChange the branch to the Exercise_wk4 branch.\n\n\n% git checkout Exercise_wk4\nSwitched to branch 'Exercise_wk4'\nYour branch is up to date with 'origin/Exercise_wk4'.\n\nI’ve now been switched to the Exercise_wk4 branch. It is up to date with origin/Exercise_wk4, meaning that GitHub and my local copy are in sync. origin is a shorthand name for the remote repository that a project was originally cloned from. It is useful that origin is referenced instead of the original repo’s URL –&gt; This makes referencing much more convenient.\n\n\n\n3.6.3 Inspect the current state\nMake sure you are in the Exercise_wk4 branch. Then Use git log --graph to inspect the current Git branch and its commits.\n\n% git log --graph          \n*   commit 176137b1667cc6903f7a9eead5723892ef1a77a7 (HEAD -&gt; master, origin/master, origin/HEAD)\n|\\  Merge: 0e67723 c902093\n| | Author: Gerko Vink &lt;g.vink@uu.nl&gt;\n| | Date:   Thu Oct 29 12:44:01 2020 +0100\n| | \n| |     Merge pull request #38 from thomasjwise/wisedev\n| |     \n| |     Assignment 3 - Beamer PDF\n| |     \n| |     Well done ✅\n| | \n| * commit c9020931678d90d91cfe21778e6ce5b4943e46cb\n| | Author: Thomas Wise &lt;48682160+thomasjwise@users.noreply.github.com&gt;\n| | Date:   Wed Oct 28 13:59:23 2020 +0100\n| | \n| |     Assignment 3 - Beamer PDF\n| |   \n* |   commit 0e67723572744b769389f5b8883c9f1aa6a3b7dd\n|\\ \\  Merge: 4134b75 1f488c6\n| | | Author: Gerko Vink &lt;g.vink@uu.nl&gt;\n| | | Date:   Thu Oct 29 11:27:16 2020 +0100\n| | | \n\nWe see information about the history that brought us to this point in time. We see commit messages, the author, the dates, the SHA-1 hash and the graph tree. We asked for the graph tree with --graph.\nYou can scroll up and down the graph. To exit the graph window, type q. For help, type h. To obtain a more condensed graph, use\n\n% git log --oneline --graph\n*   176137b (HEAD -&gt; Exercise_wk4, origin/master, origin/HEAD, origin/Exercise_wk4, master) Merge pull request #38 from thomasjwise/wisedev\n|\\  \n| * c902093 Assignment 3 - Beamer PDF\n* |   0e67723 Merge pull request #39 from gerkovink/SofieIssue\n|\\ \\  \n| * | 1f488c6 (SofieIssue) remove pipe operator\n| * | 4ead406 update readme.md\n|/ /  \n* |   4134b75 Merge pull request #37 from pietjonker/piet\n|\\ \\  \n| * | f50014b commit assignment 2\n| * | 5ae2b9b Assignment 1 and 2\n* | |   f277a35 Merge pull request #35 from zoedunias/zoedev\n|\\ \\ \\  \n| * | | 1c9aad6 Added Exercise 2\n* | | |   43fb1ed Merge pull request #34 from RianneKraakman/riannedev\n|\\ \\ \\ \\  \n| * | | | 75d9293 Add assignment 2\n* | | | |   d3df110 Merge pull request #33 from gerkovink/gerkodev\n|\\ \\ \\ \\ \\  \n| * \\ \\ \\ \\   34954f8 (origin/gerkodev, gerkodev) Merge pull request #22 from Goorbergh/ruben_assignment_1\n\nThis graph view is much more condensed. The nice thing about this view is the direct depiction of each action’s abbreviated SHA-1 key.\nWe can use the SHA-1 keys to instruct Git. For example, to obtain the history on commit c902093, we only need to refer the SHA-1 hash.\n\n% git log c902093          \ncommit c9020931678d90d91cfe21778e6ce5b4943e46cb\nAuthor: Thomas Wise &lt;48682160+thomasjwise@users.noreply.github.com&gt;\nDate:   Wed Oct 28 13:59:23 2020 +0100\n\n    Assignment 3 - Beamer PDF\n\ncommit db649539738bb30b63d93053b67891ef6c55037e\nAuthor: Thomas Wise &lt;48682160+thomasjwise@users.noreply.github.com&gt;\nDate:   Wed Sep 16 14:04:21 2020 +0200\n\n    Assignment 1\n\ncommit 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3\nMerge: 7f0806b f4a11cb\nAuthor: Gerko Vink &lt;g.vink@uu.nl&gt;\nDate:   Tue Sep 15 20:15:25 2020 +0200\n\n    Merge pull request #2 from gerkovink/gerkodev\n    \n    This image is too large\n\ncommit f4a11cbed729bc8454c01866aab4291b3b580d6f\nAuthor: Gerko Vink &lt;g.vink@uu.nl&gt;\n\nOr, a more condensed version of the same\n\n% git log c902093 --pretty=oneline\nc9020931678d90d91cfe21778e6ce5b4943e46cb Assignment 3 - Beamer PDF\ndb649539738bb30b63d93053b67891ef6c55037e Assignment 1\n21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 Merge pull request #2 from gerkovink/gerkodev\nf4a11cbed729bc8454c01866aab4291b3b580d6f resize image\n7f0806b68387d4f3c8af5c1f27d94b69e90a2d13 Merge pull request #1 from gerkovink/gerkodev\na36ed81b3831e6084c2adf661dc4cfb32c4cb5f7 add childhood memory\n9ba9c43437a7f00f5095df55db0c07d7233ad152 Add CV\n9bf1c32ea55b60bce613d65765c18deb522772ff Update .gitignore\n18761716665262f19296fb5d8e7c1720c8cea58a Merge branch 'master' of https://github.com/gerkovink/markup2020\n1ee60aa26142b5f175928d409614b8de84c1ef79 Update .gitignore\n7c3d816264b5629e7bfe112954178648d94a37b4 Delete markup_sticker_SMALL.psd\n37c356ca51b4ed03e96570934f28caf5fcfd75d8 Delete .DS_Store\nd56dd90172d1106117d53102e5053165bc182020 Update .gitignore\ne7b78b592a8000d3a647de3a265c69496adebfe5 Update .gitignore\nfdd923ad2b522d6e4357229ea801d23ec5b16717 update readme\n7e14559d7f7e8676d557c9b73fc43fb3a66a0c3c added sticker\n493609efa7ce659ebebf5a0d0300f23788397e68 Initial commit\n\nPlease note that we only reference the short hash. There is no need to reference the longer hash as long as the sequence of the shorter reference is unique.\nFrom this --pretty=oneline view it is now easy to spot the origin of our course repository - the initial commit that initiated the Git goodness. You can also see that I updated the .gitignore, a hidden file that specifies which files and directories to be ignored by Git. And I did some cosmetic changes and file deletions. This is very insightfull because of the detailed, but consice commit messages.\n\n\n\n3.6.4 Checkout an old state\nGo back in time to 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 Merge pull request #2 from gerkovink/gerkodev.\nTo do so, we only need to refer the start of the SHA-1 key.\n\n% git checkout 21a3b5a\nNote: switching to '21a3b5a'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 21a3b5a Merge pull request #2 from gerkovink/gerkodev\n\nWe are now at the old state. So we went back in time. The current state where we are is independent from all later commits, but is built exactly on all preceding commits as per the tree.\nThere are a couple of terms that are new:\n\nHEAD: The HEAD in Git is the pointer to the current branch reference. It is the last commit you have made or checked out [in our case]. REMEMBER that the head will always serve as the parent to the next commit\ndetached HEAD: The same as the head, but now the pointer references a specific commit and not a branch.\n\n\n\n3.6.4.1 The problem with a detached HEAD\nThis webpage illustrates the dangers of committing changes under a detached head quite nicely:\n\nThe HEAD pointer in Git determines your current working revision (and thereby the files that are placed in your project’s working directory). Normally, when checking out a proper branch name, Git automatically moves the HEAD pointer along when you create a new commit. You are automatically on the newest commit of the chosen branch.  When you instead choose to check out a commit hash, Git won’t do this for you. The consequence is that when you make changes and commit them, these changes do NOT belong to any branch. This means they can easily get lost once you check out a different revision or branch: not being recorded in the context of a branch, you lack the possibility to access that state easily (unless you have a brilliant memory and can remember the commit hash of that new commit…).\n\nThe useful thing about going to an old commit is that you can take this state as a point of departure. Just beware of the pitfalls of working under a detached HEAD.\n\n\n\n3.6.4.2 leave the detached HEAD\nGo back to the branch HEAD\n\n% git switch -                    \nPrevious HEAD position was 21a3b5a Merge pull request #2 from gerkovink/gerkodev\nSwitched to branch 'Exercise_wk4'\nYour branch is up to date with 'origin/Exercise_wk4'.\n\n\n\n\n\n3.6.5 Make a new branch of the old state\nLet’s take that old state and make it into a proper point of departure for new things. Again, reference 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 Merge pull request #2 from gerkovink/gerkodev, but now we make the state of 21a3b5a into a new branch. We call that branch Wk4_markup:\n\n% git checkout -b Wk4_markup 21a3b5a \nSwitched to a new branch 'Wk4_markup'\n\nWe now have checked out an old state and made it into a new branch. The cool thing is that we can now commit all we want and everything will be properly logged. Just remember that if you’d like to go back in time and play around with an old state of your project –&gt; Merge the old state into a new branch like I demonstrated above.\n\n\n\n3.6.6 Add a new commit\nWe start by creating an empty text file\n\n% touch add_text_file.txt\n\nIf the touch command does not work on your machine, you may also create this file by hand. In a Windows-terminal, you can also use the command:\n\nPS C:\\GitHub\\Markup2020&gt; New-Item .\\add_text_file.txt -type file\n\nNow, if we would like to commit the addition of this file to our repo, we get the following:\n\n% git commit -a -m 'add text file'\nOn branch Wk4_markup\nUntracked files:\n    add_text_file.txt\n\nnothing added to commit but untracked files present\n\nThe commit was not succesfull, because the file add_text_file.txt is not yet tracked. Note that I use -a to specify to commit all changed files and folders that are tracked. I use -m to indicate that I would like to add the message add text file.\nYou see that using a GUI to Git like GitHub desktop or RStudio is quite convenient if you would not like to indicate which files to track. It is also less flexible.\n\n\n3.6.6.1 Add files to tracking\nTo track all untracked files and folders\n\ngit add -A\n\n\n\n\n3.6.6.2 commit with a message\nNow if we revisit the commit command\n\n% git commit -a -m 'add text file'\n[Wk4_markup 8d30c46] add text file\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 add_text_file.txt\n\n\n\n\n\n3.6.7 Study the log again\n\n% git log --pretty=oneline\n8d30c4698b9761d650de2f5288389257762753ce (HEAD -&gt; Wk4_markup) add text file\n21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 (old-state) Merge pull request #2 from gerkovink/gerkodev\nf4a11cbed729bc8454c01866aab4291b3b580d6f resize image\n7f0806b68387d4f3c8af5c1f27d94b69e90a2d13 Merge pull request #1 from gerkovink/gerkodev\na36ed81b3831e6084c2adf661dc4cfb32c4cb5f7 add childhood memory\n9ba9c43437a7f00f5095df55db0c07d7233ad152 Add CV\n9bf1c32ea55b60bce613d65765c18deb522772ff Update .gitignore\n18761716665262f19296fb5d8e7c1720c8cea58a Merge branch 'master' of https://github.com/gerkovink/markup2020\n1ee60aa26142b5f175928d409614b8de84c1ef79 Update .gitignore\n7c3d816264b5629e7bfe112954178648d94a37b4 Delete markup_sticker_SMALL.psd\n37c356ca51b4ed03e96570934f28caf5fcfd75d8 Delete .DS_Store\nd56dd90172d1106117d53102e5053165bc182020 Update .gitignore\ne7b78b592a8000d3a647de3a265c69496adebfe5 Update .gitignore\nfdd923ad2b522d6e4357229ea801d23ec5b16717 update readme\n7e14559d7f7e8676d557c9b73fc43fb3a66a0c3c added sticker\n493609efa7ce659ebebf5a0d0300f23788397e68 Initial commit\n\nWe can see that the HEAD is now at the latest commit and that this commit comes after the old-state from which we created the branch.\n\n\n3.6.7.1 Now add another empty text file.\n\n% touch add_another_text_file.txt\n\nLet’s say that we rather would have included this file in the previous commit, we can achieve this by\n\n% git add -A\n% git commit --amend -m \"add two text files\"\n[Wk4_markup 9e6c38c] add two text files\n Date: Tue Nov 3 23:09:11 2020 +0100\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 add_text_file.txt\n\nWe have effectively ammended the previous commit. We’ve also changed the commit message into add two text files:\n\n% git log --pretty=oneline\n9e6c38c2288f7e7fce75de3bd1ffb522de112a8b (HEAD -&gt; Wk4_markup) add two text files\n21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 (old-state) Merge pull request #2 from gerkovink/gerkodev\nf4a11cbed729bc8454c01866aab4291b3b580d6f resize image\n7f0806b68387d4f3c8af5c1f27d94b69e90a2d13 Merge pull request #1 from gerkovink/gerkodev\na36ed81b3831e6084c2adf661dc4cfb32c4cb5f7 add childhood memory\n9ba9c43437a7f00f5095df55db0c07d7233ad152 Add CV\n9bf1c32ea55b60bce613d65765c18deb522772ff Update .gitignore\n18761716665262f19296fb5d8e7c1720c8cea58a Merge branch 'master' of https://github.com/gerkovink/markup2020\n1ee60aa26142b5f175928d409614b8de84c1ef79 Update .gitignore\n7c3d816264b5629e7bfe112954178648d94a37b4 Delete markup_sticker_SMALL.psd\n37c356ca51b4ed03e96570934f28caf5fcfd75d8 Delete .DS_Store\nd56dd90172d1106117d53102e5053165bc182020 Update .gitignore\ne7b78b592a8000d3a647de3a265c69496adebfe5 Update .gitignore\nfdd923ad2b522d6e4357229ea801d23ec5b16717 update readme\n7e14559d7f7e8676d557c9b73fc43fb3a66a0c3c added sticker\n493609efa7ce659ebebf5a0d0300f23788397e68 Initial commit\n\n\n\n\n\n3.6.8 Undo a commit\nWhen shit hits the fan, we can always undo a commit. For example, the following command reverts all changes to the inital commit\n\n% git reset --hard 493609e  \nHEAD is now at 493609e Initial commit\n\nWe are now back at the first commit in the project.\n\n\n3.6.9 Undo undoing a commit\nTo properly do this without making mistakes, it is best to study the history of the HEAD\n\n% git reflog                \n493609e (HEAD -&gt; Wk4_markup) HEAD@{0}: reset: moving to 493609e\n9e6c38c HEAD@{1}: commit (amend): add two text files\n8d30c46 HEAD@{2}: commit: add text file\n21a3b5a (old-state) HEAD@{3}: checkout: moving from Exercise_wk4 to Wk4_markup\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{4}: checkout: moving from Exercise_wk4 to Exercise_wk4\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{5}: checkout: moving from old-state to Exercise_wk4\n21a3b5a (old-state) HEAD@{6}: checkout: moving from Exercise_wk4 to old-state\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{7}: checkout: moving from 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 to Exercise_wk4\n21a3b5a (old-state) HEAD@{8}: checkout: moving from Exercise_wk4 to 21a3b5a\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{9}: checkout: moving from 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 to Exercise_wk4\n21a3b5a (old-state) HEAD@{10}: checkout: moving from Exercise_wk4 to 21a3b\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{11}: checkout: moving from 21a3b5ac1535703f4ce0d6feb2ccf3703f95eee3 to Exercise_wk4\n21a3b5a (old-state) HEAD@{12}: checkout: moving from Exercise_wk4 to 21a3b5a\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{13}: checkout: moving from master to Exercise_wk4\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{14}: checkout: moving from Exercise_wk4 to master\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{15}: checkout: moving from Exercise_wk4 to Exercise_wk4\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{16}: checkout: moving from master to Exercise_wk4\n176137b (origin/master, origin/HEAD, origin/Exercise_wk4, master, Exercise_wk4) HEAD@{17}: checkout: moving from SofieIssue to master\n1f488c6 (SofieIssue) HEAD@{18}: commit: remove pipe operator\n4ead406 HEAD@{19}: commit: update readme.md\n\nWe are now looking at the reflog - the log of where the HEAD has been. It used to be at\n\n9e6c38c HEAD@{1}: commit (amend): add two text files\n\nbut is now at\n\n493609e (HEAD -&gt; Wk4_markup) HEAD@{0}: reset: moving to 493609e\n\nWe can use this history of where the head has been to go back to the previous step. In other words, if we would like to undo a commit, we can always go back to the previous HEAD stage –&gt; the HEAD has been moved one step forward by the commit. Likewise, if we would like to undo a hard reset, we can also go back to the previous HEAD stage –&gt; the HEAD has been moved one step forward by the reset.\nTo undo it all, we can use the indicator that is referenced by the reflog:\n\n% git reset --hard HEAD@{1}\nHEAD is now at 9e6c38c add two text files\n\nUsing reflog and HEAD is in this case more flexible than using log and the SHA-1 hash. reflog yields the log of all changes in the pointer HEAD, while log only gives you the history of the logged commits. Once a commit is undone, it is gone from the log. Moreover, using reflog and HEAD allows you to go back into the future, like in the above example.\nNOTE: Do not wait too long to undo your resets. After a few days/weeks garbage collection may kick in and Git will eventually see old commit as unreferenced. This makes them irretrievable\n\n\n\n3.6.10 Redo a commit\nA hard reset brings you back to a previous state. It loses all changes that have been committed since. If you’d like to undo a single commit and erase the commit message, but not throw out the modifications:\n\ngit reset --soft 493609e \n\nWe are now back at the initial commit, but all changes since have been staged. We can commit these changes as\n\n% git commit -a -m 'everything in a single commit'\n[Wk4_markup 525efa5] everything in a single commit\n 7 files changed, 36 insertions(+), 1 deletion(-)\n create mode 100644 Gerko/Assignment 1/Vink.jpg\n create mode 100644 Gerko/Assignment 1/Vink.pdf\n create mode 100644 README.Rmd\n create mode 100644 add_text_file.txt\n create mode 100644 markup_sticker_SMALL.png\n\nIf we study the log, we find that there are now only two commits.\n\n% git log --pretty=oneline                        \n5fe2c1bd44b1dbc92172b85dec3d87ced7073deb (HEAD -&gt; Wk4_markup) everything in a single commit\n493609efa7ce659ebebf5a0d0300f23788397e68 Initial commit\n\n\n\n\n3.6.11 Merging branches\nLet’s see if we can merge the Wk4_markup branch into the Exercise_wk4 branch.\nFirst we need to checkout the branch we would like to merge into:\n\n% git checkout Exercise_wk4\nUpdating files: 100% (174/174), done.\nSwitched to branch 'Exercise_wk4'\nYour branch is up to date with 'origin/Exercise_wk4'.\n\nThen we can attempt to merge:\n\n% git merge Wk4_markup   \nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nCONFLICT (add/add): Merge conflict in README.Rmd\nAuto-merging README.Rmd\nAutomatic merge failed; fix conflicts and then commit the result.\n\nWe’ve now effectively created a conflict. A conflict must be resolved before a merge is possible. If you switch to GiHub desktop, you’ll see this pop-up\n\nYou can use the drop-down menu to choose either modified file version as the one to keep after merging (which means you’ll throw out the other version from the other branch)\n\nThere is also the option to open the file in the editor and manually resolve the conflict.\n\nWe now see the detail about this conflict. Remember that we took an old state as our point of departure? After that point I have changed the header of the Readme.Rmd file. This conflict needs to be resolved before we can merge these branches.\n\n\n3.6.11.1 Resolve the conflict\nChoose Wk4_markup as the reference. Throw out the version from Exercise_wk4. You can do this manually or by choosing the following drop-down item in GitHub Desktop:\n\nAfter that, we can stage the changes and commit them in the Exercise_wk4 branch:\n\n% git add -A\n% git commit -m 'conflict resolved'\n\n\n\n\n\n3.6.12 Hand in your exercise\n\nTake the merged Exercise_wk4 branch as your point of departure\nCreate a new branch named Wk3_yourname\nChange the filename of the text file to yourname.txt\nStage the changes\nCommit the changes with a custom message\nPublish your branch on GitHub\nDo a pull request that can be automatically merged.\nPost an issue in your forked template (remember ?sec-deliv), wherin you properly reference your PR to the old course repo.\n\nYou should now have all the skills to fill your template with the course deliverables and exercises. Now would be a good time to update your deliverables repository. If you have any questions, please post them as an issue to the course repository.\n\n\n\n3.6.13 Solution\n\n% git branch Wk4_gerkovink \n% git checkout Wk4_gerkovink\nSwitched to branch 'Wk4_gerkovink'\n% mv add_text_file.txt gerkovink.txt\n% git add -A\n% git commit -m 'gerko`s commit'    \n[Wk4_gerkovink fb26e75] gerko`s commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename add_text_file.txt =&gt; gerkovink.txt (100%)\n% git push origin Wk4_gerkovink\nEnumerating objects: 15, done.\nCounting objects: 100% (15/15), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (10/10), done.\nWriting objects: 100% (10/10), 1002 bytes | 1002.00 KiB/s, done.\nTotal 10 (delta 7), reused 0 (delta 0)\nremote: Resolving deltas: 100% (7/7), completed with 3 local objects.\nremote: \nremote: Create a pull request for 'Wk4_gerkovink' on GitHub by visiting:\nremote:      https://github.com/gerkovink/markup2020/pull/new/Wk4_gerkovink\nremote: \nTo https://github.com/gerkovink/markup2020.git\n * [new branch]      Wk4_gerkovink -&gt; Wk4_gerkovink"
  },
  {
    "objectID": "story.html",
    "href": "story.html",
    "title": "Contributors",
    "section": "",
    "text": "The following story is written together with students from the course. The story is a work in progress and will be updated in current and future iterations of this course.\n\nI opened the … [add three more words here]\n\nHere is a list of contributors that helped to make this story possible.\n\nGerko Vink\n[add your name here]",
    "crumbs": [
      "Contributors"
    ]
  }
]